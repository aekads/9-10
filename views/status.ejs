<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Status Page</title>
  <link rel="stylesheet" href="/css/styles.css">
 
</head>
<body>
  <header>
    <h1>Status Page</h1>
  </header>
  
  <div class="container">
    <h2>Client and Network Statuses</h2>
    <h2><button id="masterRestartButton">Master Restart</button></h2>

    <% 
      function timeSince(dateTime) {
        const seconds = Math.floor((Date.now() - new Date(dateTime)) / 1000);
        let interval = Math.floor(seconds / 86400);
        if (interval >= 1) return interval + " day" + (interval > 1 ? "s" : "") + " ago";
        
        interval = Math.floor(seconds / 3600);
        if (interval >= 1) return interval + " hour" + (interval > 1 ? "s" : "") + " ago";
        
        interval = Math.floor(seconds / 60);
        if (interval >= 1) return interval + " minute" + (interval > 1 ? "s" : "") + " ago";
        
        return seconds + " second" + (seconds > 1 ? "s" : "") + " ago";
      }
    %>
    <% if (Object.keys(clientStatuses).length > 0 || Object.keys(networkStatuses).length > 0) { %>
      <table>
        <thead>
          <tr>
            <th>Client ID</th>
            <th>Screen Name</th> <!-- Add Screen Name column -->
            <th>Client Status</th>
            <th>Last Response Time</th>
            <th>Network Status</th>
            <th>Last Network Response Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% Object.keys(clientStatuses).forEach(clientId => { %>
            <tr>
              <td><strong><%= clientId %></strong></td>
  
              <!-- Match screen name with clientId -->
              <% 
                const screen = screens.find(screen => screen.screenid == clientId); 
                if (screen) { 
              %>
                <td><%= screen.screenname %></td>
              <% } else { %>
                <td>No screen available</td>
              <% } %>
  
              <td class="<%= clientStatuses[clientId].status %>"><%= clientStatuses[clientId].status %></td>
              <td><%= timeSince(clientStatuses[clientId].dateTime) %></td>
              <% if (networkStatuses[clientId]) { %>
                <td class="network-<%= networkStatuses[clientId].status %>"><%= networkStatuses[clientId].status %></td>
                <td><%= timeSince(networkStatuses[clientId].dateTime) %></td>
              <% } else { %>
                <td colspan="2">No network status available</td>
              <% } %>
              <td>
                <button onclick="volumeUp('<%= clientId %>')">Volume Up</button>
                <button onclick="volumeDown('<%= clientId %>')">Volume Down</button>
            <label for="volumeValue-<%= clientId %>">Set Volume:</label>
<input
  type="range"
  id="volumeValue-<%= clientId %>"
  min="1"
  max="15"
  value="1" <!-- Initial value -->
  oninput="updateVolumeDisplay('<%= clientId %>')"
>
<span id="volumeDisplay-<%= clientId %>">1</span> <!-- Initial display value -->
<button id="setVolumeButton-<%= clientId %>" onclick="setVolume('<%= clientId %>')">Set Volume</button>


              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    <% } else { %>
      <p>No clients or network statuses available at the moment.</p>
    <% } %>
  </div>
<script>

    function restartClient(clientId) {
      fetch(`/restart-client/${clientId}`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => alert(data.message))
      .catch(error => console.error('Error:', error));
    }
  
    function updateApp(clientId) {
      fetch(`/update-app/${clientId}`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => alert(data.message))
      .catch(error => console.error('Error:', error));
    }
  
    function volumeUp(clientId) {
      fetch(`/volume-up/${clientId}`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => alert(data.message))
      .catch(error => console.error('Error:', error));
    }
  
    function volumeDown(clientId) {
      fetch(`/volume-down/${clientId}`, {
        method: 'POST'
      })
      .then(response => response.json())
      .then(data => alert(data.message))
      .catch(error => console.error('Error:', error));
    }

function updateVolumeDisplay(clientId) {
  const volumeValue = document.getElementById(`volumeValue-${clientId}`).value;
  document.getElementById(`volumeDisplay-${clientId}`).innerText = volumeValue;
}

function setVolume(clientId) {
  const volumeValue = document.getElementById(`volumeValue-${clientId}`).value;
  const button = document.querySelector(`#setVolumeButton-${clientId}`);
  
  // Disable the button to prevent multiple submissions
  button.disabled = true;

  fetch(`/set-volume/${clientId}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ volume: volumeValue })
  })
  .then(response => response.json())
  .then(data => alert(data.message))
  .catch(error => {
    console.error('Error setting volume:', error);
    alert('Failed to set volume. Please try again.');
  })
  .finally(() => {
    // Re-enable the button after the request completes
    button.disabled = false;
  });
}



  </script>
</body>
</html>
