<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Impressions</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f4f4f4;
    }
    .controls {
      margin-bottom: 15px;
    }
    .controls label {
      margin-right: 10px;
    }
    .controls input, .controls select {
      margin-right: 15px;
    }
    .area-heading {
      margin-top: 20px;
      font-size: 1.2em;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Video Impressions</h1>

  <div class="controls">
    <label for="nameFilter">Filter by Name:</label>
    <select id="nameFilter">
      <option value="all">All</option>
      <% 
        const uniqueNames = [...new Set(data.map(row => row.name))];
        uniqueNames.forEach(name => { 
      %>
        <option value="<%= name %>"><%= name %></option>
      <% }) %>
    </select>

    <label for="fromDate">From:</label>
    <input type="date" id="fromDate">

    <label for="toDate">To:</label>
    <input type="date" id="toDate">
    <button id="applyDateFilters">Apply Date Filters</button>
  </div>

  <% 
    const dataByArea = data.reduce((acc, row) => {
      if (!acc[row.area]) {
        acc[row.area] = [];
      }
      acc[row.area].push(row);
      return acc;
    }, {});

    Object.entries(dataByArea).forEach(([area, rows]) => { 
  %>
    <div class="area-group">
      <div class="area-heading">Property Name: <%= area %></div>
      <table>
        <thead>
          <tr>
            <th>City</th>
            <th>Apartment</th>
            <th>Total Households</th>
            <th>Total Screens</th>
            <th>Screen ID</th>
            <th>Unique Screen ID</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Slot Length in Sec</th>
            <th>Total Impressions to deliver for duration</th>
            <th>Total Impressions delivered during report period</th>
            <th>Surplus / Balance</th>
          </tr>
        </thead>
        <tbody>
          <% 
            const groupedData = rows.reduce((acc, row) => {
              const key = `${row.name}-${row.screen_id}`;
              if (!acc[key]) {
                acc[key] = { ...row, count: parseInt(row.count, 10) };
              } else {
                acc[key].count += parseInt(row.count, 10);
              }
              return acc;
            }, {});

            Object.values(groupedData).forEach(row => {
              const surplus = row.count - 720;
          %>
            <tr data-name="<%= row.name %>" data-screen-id="<%= row.screen_id %>" data-uploaded-date="<%= row.uploaded_date %>">
              <td><%= row.city %></td>
              <td><%= row.area %></td>
              <td><%= row.reach %></td>
              <td>1</td>
              <td><%= row.screen_id %></td>
              <td><%= row.screenname %></td>
              <td>06:00</td>
              <td>23:59</td>
              <td>10</td>
              <td>720</td>
              <td><%= row.count %></td>
              <td><%= surplus %></td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% }) %>

  <script>
    const nameFilter = document.getElementById('nameFilter');
    const fromDate = document.getElementById('fromDate');
    const toDate = document.getElementById('toDate');
    const applyDateFilters = document.getElementById('applyDateFilters');
    const tableGroups = Array.from(document.querySelectorAll('.area-group'));

    function applyFilters() {
  const selectedName = nameFilter.value;
  const fromDateValue = fromDate.value;
  const toDateValue = toDate.value;

  tableGroups.forEach(group => {
    const rows = Array.from(group.querySelectorAll('tbody tr'));
    const groupedRows = {};

    // Group rows by Screen ID and Uploaded Date
    rows.forEach(row => {
      const rowName = row.dataset.name;
      const rowDate = row.dataset.uploadedDate;
      const screenId = row.dataset.screenId;
      const key = `${screenId}-${rowName}`; // Group by Screen ID and Name

      const showByName = selectedName === 'all' || rowName === selectedName;
      const showByDate =
        (!fromDateValue || new Date(rowDate) >= new Date(fromDateValue)) &&
        (!toDateValue || new Date(rowDate) <= new Date(toDateValue));
      
      if (showByName && showByDate) {
        if (!groupedRows[key]) {
          groupedRows[key] = {
            row,
            count: parseInt(row.querySelector('td:nth-child(11)').innerText, 10), // Total Impressions Delivered
          };
        } else {
          // Update count and merge rows
          groupedRows[key].count += parseInt(row.querySelector('td:nth-child(11)').innerText, 10);
        }
      }
    });

    // Update the DOM to show consolidated rows
    rows.forEach(row => (row.style.display = 'none')); // Hide all rows initially
    let groupVisible = false;

    Object.values(groupedRows).forEach(({ row, count }) => {
      const surplusCell = row.querySelector('td:nth-child(12)'); // Surplus cell
      const impressionsDeliveredCell = row.querySelector('td:nth-child(11)'); // Total Impressions Delivered cell
      impressionsDeliveredCell.innerText = count;
      surplusCell.innerText = count - 720; // Update surplus

      row.style.display = ''; // Show consolidated row
      groupVisible = true;
    });

    group.style.display = groupVisible ? '' : 'none';
  });
}

nameFilter.addEventListener('change', applyFilters);
fromDate.addEventListener('input', applyFilters);
toDate.addEventListener('input', applyFilters);

  </script>
</body>
</html>
